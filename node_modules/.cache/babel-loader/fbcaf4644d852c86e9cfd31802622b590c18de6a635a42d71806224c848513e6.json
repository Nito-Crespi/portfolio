{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React\\\\portfolio\\\\src\\\\components\\\\nito\\\\Nito.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RandomTextEffect = () => {\n  _s();\n  let timeoutId;\n  const originalText = \"nito\";\n  const [displayText, setDisplayText] = useState(\"----\");\n  const [index, setIndex] = useState(0);\n  const getSurroundingLetters = char => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    const index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n      return \"Invalid character\";\n    }\n    let result = \"\";\n    for (let i = 5; i > 0; i--) {\n      result += alphabet[(index - i + alphabet.length) % alphabet.length];\n    }\n    result += char.toLowerCase();\n    for (let i = 1; i <= 5; i++) {\n      result += alphabet[(index + i) % alphabet.length];\n    }\n    return result;\n  };\n  const updateText = () => {\n    if (displayText === originalText) {\n      return; // Detener la actualizaci칩n si displayText ya es igual a originalText\n    }\n    timeoutId = setTimeout(() => {\n      const char = originalText[index];\n      const chars = getSurroundingLetters(char);\n      let nextChar = chars[Math.floor(Math.random() * chars.length)];\n      let newTextArray = displayText.split(\"\"); // Convertir string a array\n      newTextArray[index] = nextChar; // Modificar el array\n      const newText = newTextArray.join(\"\"); // Convertir array de nuevo a string\n\n      setDisplayText(newText); // Actualizar estado\n\n      // Si el car치cter coincide, avanzar al siguiente\n      if (nextChar === char) {\n        setIndex(prevIndex => prevIndex + 1);\n      }\n    }, 100);\n  };\n  useEffect(() => {\n    if (index < originalText.length) {\n      updateText();\n    }\n    return () => clearTimeout(timeoutId);\n  }, [displayText, index]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"2rem\",\n        fontFamily: \"monospace\",\n        color: \"#01D4F9\"\n      },\n      children: displayText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(RandomTextEffect, \"YUtlx7PE5xqi1wLfioXWBZgHCB8=\");\n_c = RandomTextEffect;\nexport default RandomTextEffect;\nvar _c;\n$RefreshReg$(_c, \"RandomTextEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","RandomTextEffect","_s","timeoutId","originalText","displayText","setDisplayText","index","setIndex","getSurroundingLetters","char","alphabet","indexOf","toLowerCase","result","i","length","updateText","setTimeout","chars","nextChar","Math","floor","random","newTextArray","split","newText","join","prevIndex","clearTimeout","children","style","fontSize","fontFamily","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Workspace/React/portfolio/src/components/nito/Nito.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst RandomTextEffect: React.FC = () => {\r\n  let timeoutId: string | number | NodeJS.Timeout | undefined;\r\n  const originalText = \"nito\";\r\n  const [displayText, setDisplayText] = useState(\"----\");\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const getSurroundingLetters = (char: string): string => {\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n    const index = alphabet.indexOf(char.toLowerCase());\r\n  \r\n    if (index === -1) {\r\n      return \"Invalid character\";\r\n    }\r\n  \r\n    let result = \"\";\r\n\r\n    for (let i = 5; i > 0; i--) {\r\n      result += alphabet[(index - i + alphabet.length) % alphabet.length];\r\n    }\r\n\r\n    result += char.toLowerCase();\r\n\r\n    for (let i = 1; i <= 5; i++) {\r\n      result += alphabet[(index + i) % alphabet.length];\r\n    }\r\n  \r\n    return result;\r\n  };\r\n\r\n  const updateText = () => {\r\n    if (displayText === originalText) {\r\n      return; // Detener la actualizaci칩n si displayText ya es igual a originalText\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n      const char = originalText[index];\r\n      const chars = getSurroundingLetters(char);\r\n      let nextChar = chars[Math.floor(Math.random() * chars.length)];\r\n      \r\n      let newTextArray = displayText.split(\"\"); // Convertir string a array\r\n      newTextArray[index] = nextChar; // Modificar el array\r\n      const newText = newTextArray.join(\"\"); // Convertir array de nuevo a string\r\n\r\n      setDisplayText(newText); // Actualizar estado\r\n\r\n      // Si el car치cter coincide, avanzar al siguiente\r\n      if (nextChar === char) {\r\n        setIndex(prevIndex => prevIndex + 1);\r\n      }\r\n\r\n    }, 100);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (index < originalText.length) {\r\n      updateText();\r\n    }\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [displayText, index]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ fontSize: \"2rem\", fontFamily: \"monospace\", color: \"#01D4F9\" }}>\r\n        {displayText}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RandomTextEffect;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}