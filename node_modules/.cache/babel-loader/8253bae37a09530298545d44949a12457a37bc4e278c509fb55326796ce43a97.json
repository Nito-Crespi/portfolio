{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React\\\\portfolio\\\\src\\\\components\\\\nito\\\\Nito.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RandomTextEffect = () => {\n  _s();\n  const originalText = \"nito\";\n  const [displayText, setDisplayText] = useState(\"----\");\n  const getSurroundingLetters = char => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    const index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n      return \"Invalid character\";\n    }\n    let result = \"\";\n\n    // Obtener 5 letras hacia atrás\n    for (let i = 5; i > 0; i--) {\n      result += alphabet[(index - i + alphabet.length) % alphabet.length];\n    }\n\n    // Añadir la letra actual\n    result += char.toLowerCase();\n\n    // Obtener 5 letras hacia adelante\n    for (let i = 1; i <= 5; i++) {\n      result += alphabet[(index + i) % alphabet.length];\n    }\n    return result;\n  };\n  useEffect(() => {\n    let currentIndex = 0;\n    let timeoutId; // Almacena el ID del timeout para limpiarlo\n\n    const randomizeChar = () => {\n      const chars = \"abcdefghijklmnopqrstuvwxyz\";\n      return chars[Math.floor(Math.random() * chars.length)];\n    };\n    const updateText = () => {\n      if (currentIndex < originalText.length) {\n        const nextChar = originalText[currentIndex];\n        let tempText = displayText.split(\"\");\n        timeoutId = setTimeout(() => {\n          const randomChar = randomizeChar();\n          tempText[currentIndex] = randomChar;\n          setDisplayText(tempText.join(\"\"));\n          if (randomChar === nextChar) {\n            // Si llegamos al carácter correcto, avanzamos al siguiente\n            currentIndex++;\n            updateText(); // Actualizamos el siguiente carácter\n          } else {\n            updateText(); // Seguimos buscando el carácter correcto\n          }\n        }, 100);\n      }\n    };\n    updateText();\n\n    // Cleanup en caso de que el componente se desmonte\n    return () => clearTimeout(timeoutId); // Se limpia correctamente con el ID del timeout\n  }, [displayText]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"2rem\",\n        fontFamily: \"monospace\",\n        color: \"#01D4F9\"\n      },\n      children: displayText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: getSurroundingLetters(\"a\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(RandomTextEffect, \"9LVWBTs7ktaLSV1KGR8wAjWETgc=\");\n_c = RandomTextEffect;\nexport default RandomTextEffect;\nvar _c;\n$RefreshReg$(_c, \"RandomTextEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","RandomTextEffect","_s","originalText","displayText","setDisplayText","getSurroundingLetters","char","alphabet","index","indexOf","toLowerCase","result","i","length","currentIndex","timeoutId","randomizeChar","chars","Math","floor","random","updateText","nextChar","tempText","split","setTimeout","randomChar","join","clearTimeout","children","style","fontSize","fontFamily","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Workspace/React/portfolio/src/components/nito/Nito.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst RandomTextEffect: React.FC = () => {\r\n  const originalText = \"nito\";\r\n  const [displayText, setDisplayText] = useState(\"----\");\r\n\r\n  const getSurroundingLetters = (char: string): string => {\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n    const index = alphabet.indexOf(char.toLowerCase());\r\n  \r\n    if (index === -1) {\r\n      return \"Invalid character\";\r\n    }\r\n  \r\n    let result = \"\";\r\n  \r\n    // Obtener 5 letras hacia atrás\r\n    for (let i = 5; i > 0; i--) {\r\n      result += alphabet[(index - i + alphabet.length) % alphabet.length];\r\n    }\r\n  \r\n    // Añadir la letra actual\r\n    result += char.toLowerCase();\r\n  \r\n    // Obtener 5 letras hacia adelante\r\n    for (let i = 1; i <= 5; i++) {\r\n      result += alphabet[(index + i) % alphabet.length];\r\n    }\r\n  \r\n    return result;\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    \r\n\r\n    let currentIndex = 0;\r\n    let timeoutId: NodeJS.Timeout; // Almacena el ID del timeout para limpiarlo\r\n\r\n    const randomizeChar = (): string => {\r\n      const chars = \"abcdefghijklmnopqrstuvwxyz\";\r\n      return chars[Math.floor(Math.random() * chars.length)];\r\n    };\r\n\r\n    const updateText = () => {\r\n      if (currentIndex < originalText.length) {\r\n        const nextChar = originalText[currentIndex];\r\n        let tempText = displayText.split(\"\");\r\n\r\n        timeoutId = setTimeout(() => {\r\n          const randomChar = randomizeChar();\r\n          tempText[currentIndex] = randomChar;\r\n          setDisplayText(tempText.join(\"\"));\r\n\r\n          if (randomChar === nextChar) {\r\n            // Si llegamos al carácter correcto, avanzamos al siguiente\r\n            currentIndex++;\r\n            updateText(); // Actualizamos el siguiente carácter\r\n          } else {\r\n            updateText(); // Seguimos buscando el carácter correcto\r\n          }\r\n        }, 100);\r\n      }\r\n    };\r\n\r\n    updateText();\r\n\r\n    // Cleanup en caso de que el componente se desmonte\r\n    return () => clearTimeout(timeoutId); // Se limpia correctamente con el ID del timeout\r\n  }, [displayText]);\r\n\r\n  return (\r\n    <>\r\n        <div style={{ fontSize: \"2rem\", fontFamily: \"monospace\", color: \"#01D4F9\" }}>\r\n        {displayText}\r\n        </div>\r\n        <div>\r\n            {getSurroundingLetters(\"a\")}\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RandomTextEffect;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}