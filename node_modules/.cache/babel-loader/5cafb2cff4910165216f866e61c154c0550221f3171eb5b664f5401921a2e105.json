{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React\\\\portfolio\\\\src\\\\components\\\\nito\\\\Nito.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomTextEffect = () => {\n  _s();\n  const originalText = \"nito\";\n  const [displayText, setDisplayText] = useState(\"----\");\n  useEffect(() => {\n    let currentIndex = 0;\n    let intervalId;\n    const randomizeChar = char => {\n      const chars = \"abcdefghijklmnopqrstuvwxyz\";\n      return chars[Math.floor(Math.random() * chars.length)];\n    };\n    const updateText = () => {\n      if (currentIndex < originalText.length) {\n        const nextChar = originalText[currentIndex];\n        let tempText = displayText.split(\"\");\n        intervalId = setInterval(() => {\n          tempText[currentIndex] = randomizeChar(nextChar);\n          setDisplayText(tempText.join(\"\"));\n\n          // Si la letra actual ha llegado a la del texto original\n          if (tempText[currentIndex] === nextChar) {\n            clearInterval(intervalId);\n            currentIndex++;\n            updateText(); // Llama a la función recursivamente para el próximo carácter\n          }\n        }, 100); // Cambia la letra cada 100ms\n      }\n    };\n    updateText();\n\n    // Cleanup en caso de que el componente se desmonte\n    return () => clearInterval(intervalId);\n  }, [displayText]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: \"2rem\",\n      fontFamily: \"monospace\",\n      color: \"#01D4F9\"\n    },\n    children: displayText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(RandomTextEffect, \"9LVWBTs7ktaLSV1KGR8wAjWETgc=\");\n_c = RandomTextEffect;\nexport default RandomTextEffect;\nvar _c;\n$RefreshReg$(_c, \"RandomTextEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RandomTextEffect","_s","originalText","displayText","setDisplayText","currentIndex","intervalId","randomizeChar","char","chars","Math","floor","random","length","updateText","nextChar","tempText","split","setInterval","join","clearInterval","style","fontSize","fontFamily","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Workspace/React/portfolio/src/components/nito/Nito.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst RandomTextEffect: React.FC = () => {\r\n  const originalText = \"nito\";\r\n  const [displayText, setDisplayText] = useState(\"----\");\r\n\r\n  useEffect(() => {\r\n    let currentIndex = 0;\r\n    let intervalId: NodeJS.Timeout;\r\n\r\n    const randomizeChar = (char: string): string => {\r\n      const chars = \"abcdefghijklmnopqrstuvwxyz\";\r\n      return chars[Math.floor(Math.random() * chars.length)];\r\n    };\r\n\r\n    const updateText = () => {\r\n      if (currentIndex < originalText.length) {\r\n        const nextChar = originalText[currentIndex];\r\n        let tempText = displayText.split(\"\");\r\n\r\n        intervalId = setInterval(() => {\r\n          tempText[currentIndex] = randomizeChar(nextChar);\r\n          setDisplayText(tempText.join(\"\"));\r\n\r\n          // Si la letra actual ha llegado a la del texto original\r\n          if (tempText[currentIndex] === nextChar) {\r\n            clearInterval(intervalId);\r\n            currentIndex++;\r\n            updateText(); // Llama a la función recursivamente para el próximo carácter\r\n          }\r\n        }, 100); // Cambia la letra cada 100ms\r\n      }\r\n    };\r\n\r\n    updateText();\r\n\r\n    // Cleanup en caso de que el componente se desmonte\r\n    return () => clearInterval(intervalId);\r\n  }, [displayText]);\r\n\r\n  return (\r\n    <div style={{ fontSize: \"2rem\", fontFamily: \"monospace\", color: \"#01D4F9\" }}>\r\n      {displayText}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomTextEffect;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAMC,YAAY,GAAG,MAAM;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,MAAM,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,IAAIQ,YAAY,GAAG,CAAC;IACpB,IAAIC,UAA0B;IAE9B,MAAMC,aAAa,GAAIC,IAAY,IAAa;MAC9C,MAAMC,KAAK,GAAG,4BAA4B;MAC1C,OAAOA,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,KAAK,CAACI,MAAM,CAAC,CAAC;IACxD,CAAC;IAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAIT,YAAY,GAAGH,YAAY,CAACW,MAAM,EAAE;QACtC,MAAME,QAAQ,GAAGb,YAAY,CAACG,YAAY,CAAC;QAC3C,IAAIW,QAAQ,GAAGb,WAAW,CAACc,KAAK,CAAC,EAAE,CAAC;QAEpCX,UAAU,GAAGY,WAAW,CAAC,MAAM;UAC7BF,QAAQ,CAACX,YAAY,CAAC,GAAGE,aAAa,CAACQ,QAAQ,CAAC;UAChDX,cAAc,CAACY,QAAQ,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC;;UAEjC;UACA,IAAIH,QAAQ,CAACX,YAAY,CAAC,KAAKU,QAAQ,EAAE;YACvCK,aAAa,CAACd,UAAU,CAAC;YACzBD,YAAY,EAAE;YACdS,UAAU,CAAC,CAAC,CAAC,CAAC;UAChB;QACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACX;IACF,CAAC;IAEDA,UAAU,CAAC,CAAC;;IAEZ;IACA,OAAO,MAAMM,aAAa,CAACd,UAAU,CAAC;EACxC,CAAC,EAAE,CAACH,WAAW,CAAC,CAAC;EAEjB,oBACEJ,OAAA;IAAKsB,KAAK,EAAE;MAAEC,QAAQ,EAAE,MAAM;MAAEC,UAAU,EAAE,WAAW;MAAEC,KAAK,EAAE;IAAU,CAAE;IAAAC,QAAA,EACzEtB;EAAW;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA3CID,gBAA0B;AAAA8B,EAAA,GAA1B9B,gBAA0B;AA6ChC,eAAeA,gBAAgB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}