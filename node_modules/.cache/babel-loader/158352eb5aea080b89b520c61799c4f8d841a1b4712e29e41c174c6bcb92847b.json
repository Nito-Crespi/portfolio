{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\React\\\\portfolio\\\\src\\\\components\\\\nito\\\\Nito.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RandomTextEffect = () => {\n  _s();\n  let timeoutId;\n  const originalText = \"nito\";\n  const [displayText, setDisplayText] = useState(\"----\");\n  const getSurroundingLetters = char => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    const index = alphabet.indexOf(char.toLowerCase());\n    if (index === -1) {\n      return \"Invalid character\";\n    }\n    let result = \"\";\n    for (let i = 5; i > 0; i--) {\n      result += alphabet[(index - i + alphabet.length) % alphabet.length];\n    }\n    result += char.toLowerCase();\n    for (let i = 1; i <= 5; i++) {\n      result += alphabet[(index + i) % alphabet.length];\n    }\n    return result;\n  };\n  const updateText = () => {\n    if (displayText === originalText) {\n      return; // Detener la actualización si displayText ya es igual a originalText\n    }\n    timeoutId = setTimeout(() => {\n      let index = 0;\n      let nito = true;\n      while (nito) {\n        const char = originalText[index];\n        const chars = getSurroundingLetters(char);\n        let nextChar = chars[Math.floor(Math.random() * chars.length)];\n        let newTextArray = displayText.split(\"\"); // Convertir string a array\n        newTextArray[index] = nextChar; // Modificar el array\n        const newText = newTextArray.join(\"\"); // Convertir array de nuevo a string\n        setDisplayText(newText); // Actualizar estado\n\n        if (char === nextChar) {\n          index++;\n          if (index >= originalText.length) {\n            nito = false;\n          }\n        }\n      }\n    }, 100);\n  };\n\n  // Llama a updateText en useEffect\n  useEffect(() => {\n    updateText();\n    return () => clearTimeout(timeoutId);\n  }, [displayText]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"2rem\",\n        fontFamily: \"monospace\",\n        color: \"#01D4F9\"\n      },\n      children: displayText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: getSurroundingLetters(\"a\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(RandomTextEffect, \"9LVWBTs7ktaLSV1KGR8wAjWETgc=\");\n_c = RandomTextEffect;\nexport default RandomTextEffect;\nvar _c;\n$RefreshReg$(_c, \"RandomTextEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","RandomTextEffect","_s","timeoutId","originalText","displayText","setDisplayText","getSurroundingLetters","char","alphabet","index","indexOf","toLowerCase","result","i","length","updateText","setTimeout","nito","chars","nextChar","Math","floor","random","newTextArray","split","newText","join","clearTimeout","children","style","fontSize","fontFamily","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Workspace/React/portfolio/src/components/nito/Nito.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst RandomTextEffect: React.FC = () => {\r\n  let timeoutId: string | number | NodeJS.Timeout | undefined;\r\n  const originalText = \"nito\";\r\n  const [displayText, setDisplayText] = useState(\"----\");\r\n\r\n  const getSurroundingLetters = (char: string): string => {\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n    const index = alphabet.indexOf(char.toLowerCase());\r\n  \r\n    if (index === -1) {\r\n      return \"Invalid character\";\r\n    }\r\n  \r\n    let result = \"\";\r\n\r\n    for (let i = 5; i > 0; i--) {\r\n      result += alphabet[(index - i + alphabet.length) % alphabet.length];\r\n    }\r\n\r\n    result += char.toLowerCase();\r\n\r\n    for (let i = 1; i <= 5; i++) {\r\n      result += alphabet[(index + i) % alphabet.length];\r\n    }\r\n  \r\n    return result;\r\n  };\r\n\r\n  const updateText = () => {\r\n    if (displayText === originalText) {\r\n        return; // Detener la actualización si displayText ya es igual a originalText\r\n    }\r\n\r\n    timeoutId = setTimeout(() => {\r\n        let index = 0;\r\n        let nito = true;\r\n\r\n        while (nito) {\r\n            const char = originalText[index];\r\n            const chars = getSurroundingLetters(char);\r\n            let nextChar = chars[Math.floor(Math.random() * chars.length)];\r\n            let newTextArray = displayText.split(\"\"); // Convertir string a array\r\n            newTextArray[index] = nextChar; // Modificar el array\r\n            const newText = newTextArray.join(\"\"); // Convertir array de nuevo a string\r\n            setDisplayText(newText); // Actualizar estado\r\n\r\n            if (char === nextChar) {\r\n                index++;\r\n                if (index >= originalText.length) {\r\n                    nito = false;\r\n                }\r\n            }\r\n        }\r\n    }, 100);\r\n};\r\n\r\n// Llama a updateText en useEffect\r\nuseEffect(() => {\r\n    updateText();\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n}, [displayText]);\r\n\r\n  return (\r\n    <>\r\n        <div style={{ fontSize: \"2rem\", fontFamily: \"monospace\", color: \"#01D4F9\" }}>\r\n        {displayText}\r\n        </div>\r\n        <div>\r\n            <span>{getSurroundingLetters(\"a\")}</span>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RandomTextEffect;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}